
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ooyklqqgnphynyrziqyh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9veWtscXFnbnBoeW55cnppcXloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1NzkyNDgsImV4cCI6MjA1OTE1NTI0OH0.d4Awen-9PnzlZTP51TpjjBkhrI3Dog4YELcbGlQs8jE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add custom table types for tables not yet in the generated types
// These will be used until the types are regenerated to include our new tables
declare module '@supabase/supabase-js' {
  interface SupabaseClient<Database> {
    // Override the "from" method to add our custom tables
    from<TableName extends string>(
      relation: TableName
    ): TableName extends 'courses' | 'course_modules' | 'lessons' | 'enrollments' | 'student_progress' | 'submissions'
      ? {
          select: (columns?: string) => { 
            eq: (column: string, value: any) => { 
              single: () => Promise<{ data: any; error: any }>;
              maybeSingle: () => Promise<{ data: any; error: any }>;
            };
            order: (column: string, options?: { ascending?: boolean }) => {
              limit: (count: number) => Promise<{ data: any[]; error: any }>;
            };
            limit: (count: number) => Promise<{ data: any[]; error: any }>;
          };
          insert: (values: any) => Promise<{ data: any; error: any }>;
          update: (values: any) => { 
            eq: (column: string, value: any) => Promise<{ data: any; error: any }>;
          };
          delete: () => { 
            eq: (column: string, value: any) => Promise<{ data: any; error: any }>;
          };
        }
      : SupabaseClient<Database>['from']; // Return original type for existing tables
    
    // Override the rpc method for our custom function
    rpc<FunctionName extends string>(
      fn: FunctionName,
      ...args: any[]
    ): FunctionName extends 'save_course_content' | 'has_role'
      ? Promise<{ data: any; error: any }>  // Return correct type for our custom functions
      : SupabaseClient<Database>['rpc']; // Return original type for existing functions
  }
}
